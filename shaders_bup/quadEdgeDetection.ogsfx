////////////////////////////////////////////////////////////////////////////////////////////////////
// quadEdgeDetection.ogsfx (GLSL)
// Brief: Edge detection operations
// Contributors: Santiago Montesdeoca
////////////////////////////////////////////////////////////////////////////////////////////////////
//             _                    _      _            _   _
//     ___  __| | __ _  ___      __| | ___| |_ ___  ___| |_(_) ___  _ __
//    / _ \/ _` |/ _` |/ _ \    / _` |/ _ \ __/ _ \/ __| __| |/ _ \| '_ \
//   |  __/ (_| | (_| |  __/   | (_| |  __/ ||  __/ (__| |_| | (_) | | | |
//    \___|\__,_|\__, |\___|    \__,_|\___|\__\___|\___|\__|_|\___/|_| |_|
//               |___/
////////////////////////////////////////////////////////////////////////////////////////////////////
// This shader file provides different algorithms for edge detection in MNPR
// 1.- Sobel edge detection
// 2.- DoG edge detection
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "include/quadCommon.ogsfh"

// TEXTURES
uniform Texture2D gDepthTex;


// SAMPLERS
uniform sampler2D gDepthSampler = sampler_state{
	Texture = <gDepthTex>;
};


// STRUCTS
attribute fragmentOutput3 {
	// Output to one target (vec 3)
	vec3 result : COLOR0;
};



//     __                  _   _
//    / _|_   _ _ __   ___| |_(_) ___  _ __  ___
//   | |_| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
//   |  _| |_| | | | | (__| |_| | (_) | | | \__ \
//   |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
//
GLSLShader Pixel_Functions{
	vec4 rgbd(ivec2 loc) {
		vec3 renderTex = texelFetch(gSampler, loc, 0).rgb;
		float linearDepth = texelFetch(gDepthSampler, loc, 0).r;
		return vec4(renderTex, linearDepth);
	}
}



//              _          _     ____   ____ ____  ____
//    ___  ___ | |__   ___| |   |  _ \ / ___| __ )|  _ \
//   / __|/ _ \| '_ \ / _ \ |   | |_) | |  _|  _ \| | | |
//   \__ \ (_) | |_) |  __/ |   |  _ <| |_| | |_) | |_| |
//   |___/\___/|_.__/ \___|_|   |_| \_\\____|____/|____/
//

// Contributor: Santiago Montesdeoca
// Performs a sobel edge detection on RGBD channels
// -> Based on the sobel image processing operator by Sobel and Feldman 1968 
//    [1968] A 3x3 Isotropic Gradient Operator for Image Processing
GLSLShader sobelRGBDFrag {
	void main() {	
		ivec2 loc = ivec2(gl_FragCoord.xy);  // for load sampling
											 
		// get rgb values at kernel area
		vec4 topLeft = rgbd(loc + ivec2(-1, -1));
		vec4 topMiddle = rgbd(loc + ivec2(0, -1));
		vec4 topRight = rgbd(loc + ivec2(1, -1));
		vec4 midLeft = rgbd(loc + ivec2(-1, 0));
		vec4 middle = rgbd(loc);
		vec4 midRight = rgbd(loc + ivec2(1, 0));
		vec4 bottomLeft = rgbd(loc + ivec2(-1, 1));
		vec4 bottomMiddle = rgbd(loc + ivec2(0, 1));
		vec4 bottomRight = rgbd(loc + ivec2(1, 1));

		// convolve with kernel
		// HORIZONTAL        VERTICAL
		// -1  -2  -1       -1   0   1
		//  0   0   0       -2   0   2
		//  1   2   1       -1   0   1

		vec4 hKernelMul = (1 * topLeft) + (2 * topMiddle) + (1 * topRight) + (-1 * bottomLeft) + (-2 * bottomMiddle) + (-1 * bottomRight);
		vec4 vKernelMul = (1 * topLeft) + (-1 * topRight) + (2 * midLeft) + (-2 * midRight) + (1 * bottomLeft) + (-1 * bottomRight);
		
		hKernelMul.a *= 5;  // modulate depth
		float rgbdHorizontal = length(hKernelMul);
		//float rgbdHorizontal = max(max(hKernel.r, hKernel.b), hKernel.g);
		vKernelMul.a *= 5;  // modulate depth
		float rgbdVertical = length(vKernelMul);
		//float rgbdVertical = max(max(vKernel.r, vKernel.b), vKernel.g);
		
		float edgeMagnitude = length(vec2(rgbdHorizontal, rgbdVertical));

		result = vec3(edgeMagnitude, edgeMagnitude, edgeMagnitude);
	}
}



//    ____         ____     ____   ____ ____  ____
//   |  _ \  ___  / ___|   |  _ \ / ___| __ )|  _ \
//   | | | |/ _ \| |  _    | |_) | |  _|  _ \| | | |
//   | |_| | (_) | |_| |   |  _ <| |_| | |_) | |_| |
//   |____/ \___/ \____|   |_| \_\\____|____/|____/
//

// Contributor: Santiago Montesdeoca
// Performs a Difference of Gaussians edge detection on RGBD channels
GLSLShader dogRGBDFrag {
	void main() {
		ivec2 loc = ivec2(gl_FragCoord.xy);  // for load sampling

		// get rgb values at kernel area
		vec4 topLeft = rgbd(loc + ivec2(-1, -1));
		vec4 topMiddle = rgbd(loc + ivec2(0, -1));
		vec4 topRight = rgbd(loc + ivec2(1, -1));
		vec4 midLeft = rgbd(loc + ivec2(-1, 0));
		vec4 middle = rgbd(loc);
		vec4 midRight = rgbd(loc + ivec2(1, 0));
		vec4 bottomLeft = rgbd(loc + ivec2(-1, 1));
		vec4 bottomMiddle = rgbd(loc + ivec2(0, 1));
		vec4 bottomRight = rgbd(loc + ivec2(1, 1));

		// convolve with kernel
		//           SIGMA 1.0
		// 0.077847   0.123317   0.077847
		// 0.123317   0.195346   0.123317
		// 0.077847   0.123317   0.077847

		vec4 gaussianKernelMul = (0.077847 * topLeft) + (0.123317 * topMiddle) + (0.077847 * topRight) +
		(0.123317 * midLeft) + (0.195346 * middle) + (0.123317 * midRight) +
		(0.077847 * bottomLeft) + (0.123317 * bottomMiddle) + (0.077847 * bottomRight);

		// calculate difference of gaussians
		vec4 dog = saturate(middle - gaussianKernelMul);
		dog.a *= 3.0;  // modulate depth
		float edgeMagnitude = length(dog);
		//float edgeMagnitude = max(max(max(dog.r, dog.b), dog.g), dog.a);

		if (edgeMagnitude > 0.05) {
			edgeMagnitude = 1.0;
		}

		result = vec3(edgeMagnitude, edgeMagnitude, edgeMagnitude);
	}
}



//    _            _           _
//   | |_ ___  ___| |__  _ __ (_) __ _ _   _  ___  ___
//   | __/ _ \/ __| '_ \| '_ \| |/ _` | | | |/ _ \/ __|
//   | ||  __/ (__| | | | | | | | (_| | |_| |  __/\__ \
//    \__\___|\___|_| |_|_| |_|_|\__, |\__,_|\___||___/
//                                  |_|
// Sobel RGBD edge detection
technique sobelRGBDEdgeDetection {
	pass p0 {
		VertexShader(in appData, out vertexOutput) = quadVert;
		PixelShader(in vertexOutput, out fragmentOutput3) = { Pixel_Functions, sobelRGBDFrag };
	}
}

// Difference of Gaussians RGBD edge detection
technique dogRGBDEdgeDetection {
	pass p0{
		VertexShader(in appData, out vertexOutput) = quadVert;
		PixelShader(in vertexOutput, out fragmentOutput3) = { Pixel_Functions, dogRGBDFrag };
	}
}
