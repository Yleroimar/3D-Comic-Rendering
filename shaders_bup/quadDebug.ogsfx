////////////////////////////////////////////////////////////////////////////////////////////////////
// quadDebug.ogsfx (GLSL)
// Brief: Debugging operations for MNPR
// Contributors: Santiago Montesdeoca, Amir Semmo
////////////////////////////////////////////////////////////////////////////////////////////////////
//        _      _
//     __| | ___| |__  _   _  __ _
//    / _` |/ _ \ '_ \| | | |/ _` |
//   | (_| |  __/ |_) | |_| | (_| |
//    \__,_|\___|_.__/ \__,_|\__, |
//                           |___/
////////////////////////////////////////////////////////////////////////////////////////////////////
// This shader file provides some debugging operations for MNPR
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "include/quadCommon.ogsfh"
#include "include/quadColorTransform.ogsfh"

// VARIABLES
uniform float gMnprGamma;
uniform vec4 gColorChannels = { 1.0, 1.0, 1.0, 0.0 };
uniform float gColorTransform = 0.0f; // 0.0: keep input, 1.0: RGB -> Lab, 2.0: Lab -> RGB



//        _      _                          _                            _
//     __| | ___| |__  _   _  __ _      ___| |__   __ _ _ __  _ __   ___| |___
//    / _` |/ _ \ '_ \| | | |/ _` |    / __| '_ \ / _` | '_ \| '_ \ / _ \ / __|
//   | (_| |  __/ |_) | |_| | (_| |   | (__| | | | (_| | | | | | | |  __/ \__ \
//    \__,_|\___|_.__/ \__,_|\__, |    \___|_| |_|\__,_|_| |_|_| |_|\___|_|___/
//                           |___/

// Contributor: Santiago Montesdeoca, Amir Semmo
// debugs the individual channels, presenting only selected channels and performing
// simple operations on them to visualize wrong values
GLSLShader debugPresentFrag {
    void main() {
        // get pixel value
        ivec2 loc = ivec2(gl_FragCoord.xy);
        vec4 renderTex = texelFetch(gSampler, loc, 0);  // equivalent to Load in HLSL
        
        if(gColorTransform == 1.0) {
            renderTex = vec4(rgb2lab(renderTex.rgb), renderTex.a);
        }
        else if(gColorTransform == 2.0) {
            renderTex = vec4(lab2rgb(renderTex.rgb), renderTex.a);
        }

        if (gMnprGamma > 0.5) {
            renderTex.rgb = pow(renderTex.rgb, vec3(0.454545455));  // [1/2.2]
        }

        if (gColorChannels.a > 0) {
            result = vec4(renderTex.a, renderTex.a, renderTex.a, renderTex.a);
        } else {
            result = vec4(gColorChannels.r * renderTex.r, gColorChannels.g * renderTex.g, gColorChannels.b * renderTex.b, renderTex.a);
        }

    }
}



//    _            _           _
//   | |_ ___  ___| |__  _ __ (_) __ _ _   _  ___  ___
//   | __/ _ \/ __| '_ \| '_ \| |/ _` | | | |/ _ \/ __|
//   | ||  __/ (__| | | | | | | | (_| | |_| |  __/\__ \
//    \__\___|\___|_| |_|_| |_|_|\__, |\__,_|\___||___/
//                                  |_|
// MNPR debug present
technique debugPresentMNPR {
    pass p0 {
        VertexShader(in appData, out vertexOutput) = quadVert;
        PixelShader(in vertexOutput, out fragmentOutput) = { Color_Transform_Functions, debugPresentFrag };
    }
}
