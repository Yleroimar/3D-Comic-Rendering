////////////////////////////////////////////////////////////////////////////////////////////////////
// quadSmudging.ogsfx (GLSL)
// Brief: Smudging effect
// Contributors: Yee Xin Chiew, Santiago Montesdeoca
////////////////////////////////////////////////////////////////////////////////////////////////////
//                            _       _             
//    ___ _ __ ___  _   _  __| | __ _(_)_ __   __ _ 
//   / __| '_ ` _ \| | | |/ _` |/ _` | | '_ \ / _` |
//   \__ \ | | | | | |_| | (_| | (_| | | | | | (_| |
//   |___/_| |_| |_|\__,_|\__,_|\__, |_|_| |_|\__, |
//                              |___/         |___/
////////////////////////////////////////////////////////////////////////////////////////////////////
// Operations for creating the smudging effect in charcoal stylization.
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../include/quadCommon.ogsfh"

// TEXTURES
uniform Texture2D gStylizationTex;
uniform Texture2D gBlendTex;
uniform Texture2D gEdgeBlurTex;
uniform Texture2D gControlTex;
uniform Texture2D gOffsetTex;


// SAMPLERS
uniform sampler2D gStylizationTexSampler = sampler_state {
    Texture = <gStylizationTex>;
};

uniform sampler2D gBlendTexSampler = sampler_state {
    Texture = <gBlendTex>;
};

uniform sampler2D gEdgeBlurTexSampler = sampler_state {
    Texture = <gEdgeBlurTex>;
};

uniform sampler2D gControlTexSampler = sampler_state {
    Texture = <gControlTex>;
};

uniform sampler2D gOffsetTexSampler = sampler_state {
    Texture = <gOffsetTex>;
};



//                            _       _             
//    ___ _ __ ___  _   _  __| | __ _(_)_ __   __ _ 
//   / __| '_ ` _ \| | | |/ _` |/ _` | | '_ \ / _` |
//   \__ \ | | | | | |_| | (_| | (_| | | | | | (_| |
//   |___/_| |_| |_|\__,_|\__,_|\__, |_|_| |_|\__, |
//                              |___/         |___/

// Contributors: Yee Xin Chiew, Santiago Montesdeoca
// Smudging effect
GLSLShader smudgingEffect {
	void main() {	
		ivec2 loc = ivec2(gl_FragCoord.xy);  // coordinates for post-processing
		vec4 renderTex = texelFetch(gStylizationTexSampler,loc,0);
        
		vec4 blendTex = texelFetch(gBlendTexSampler,loc,0);
		vec4 edgeBlurTex = texelFetch(gEdgeBlurTexSampler,loc,0);
		
        float pressure = texture(gControlTexSampler, uv).r; // smudging in red of abstraction (DETAIL)
        float mixCtrl = texture(gControlTexSampler, uv).b;  // mix in blue of abstraction target
        pressure += mixCtrl;
        
		float offsetMixing = texelFetch(gOffsetTexSampler,loc,0).r;
		float offsetPressure = texelFetch(gOffsetTexSampler,loc,0).g;
		
		vec4 finalResult = renderTex;
        
		// Handle pressure (smudging)
		if (pressure > 0.01) {
			pressure = pressure * 0.8;
			vec4 toBlend = (luminance(blendTex.rgb) > luminance(edgeBlurTex.rgb)) ? edgeBlurTex : blendTex;
			finalResult = mix(finalResult, toBlend, pressure);
		} else if (offsetMixing > 0.01) {
			// Problem:
			// edge softening effect is not evident in the results if mixing + smudging are both applied
			vec4 toBlend = (luminance(blendTex.rgb) > luminance(finalResult.rgb)) ? finalResult : blendTex;
			finalResult = mix(finalResult, toBlend, vec4(saturate((0.5 + offsetMixing) * offsetPressure * 5.0)));
        }
        //finalResult = vec4(1.0,1.0,0,1.0);
		result = finalResult;
	}
}



//    _            _           _                       
//   | |_ ___  ___| |__  _ __ (_) __ _ _   _  ___  ___ 
//   | __/ _ \/ __| '_ \| '_ \| |/ _` | | | |/ _ \/ __|
//   | ||  __/ (__| | | | | | | | (_| | |_| |  __/\__ \
//    \__\___|\___|_| |_|_| |_|_|\__, |\__,_|\___||___/
//                                  |_|                
// SMUDGING EFFECT
technique smudging {
    pass p0 {
        VertexShader(in appDataSampler, out vertexOutputSampler) = quadVertSampler;
        PixelShader(in vertexOutputSampler, out fragmentOutput) = { Common_Pixel_Functions, smudgingEffect };
    }
}
