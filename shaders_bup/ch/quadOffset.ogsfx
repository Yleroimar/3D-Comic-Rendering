////////////////////////////////////////////////////////////////////////////////////////////////////
// quadOffset.ogsfx (GLSL)
// Brief: Managing offset target and charcoal mixing effect
// Contributors: Yee Xin Chiew, Santiago Montesdeoca
////////////////////////////////////////////////////////////////////////////////////////////////////
//           __  __          _   
//     ___  / _|/ _|___  ___| |_ 
//    / _ \| |_| |_/ __|/ _ \ __|
//   | (_) |  _|  _\__ \  __/ |_ 
//    \___/|_| |_| |___/\___|\__|
//                               
////////////////////////////////////////////////////////////////////////////////////////////////////
// Operations for managing the offset target and creating the mixing effect for charcoal stylization
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "../include/quadCommon.ogsfh"

// TEXTURES
uniform Texture2D gOffsetTex;
uniform Texture2D gBlendTex;
uniform Texture2D gStylizationTex;
uniform Texture2D gAbstractionControlTex;


// SAMPLERS
uniform sampler2D gOffsetTexSampler = sampler_state {
    Texture = <gOffsetTex>;
};

uniform sampler2D gBlendTexSampler = sampler_state {
    Texture = <gBlendTex>;
};

uniform sampler2D gStylizationTexSampler = sampler_state {
    Texture = <gStylizationTex>;
};

uniform sampler2D gAbstractionControlTexSampler = sampler_state {
    Texture = <gAbstractionControlTex>;
};



//                        
//    _ __   __ _ ___ ___ 
//   | '_ \ / _` / __/ __|
//   | |_) | (_| \__ \__ \
//   | .__/ \__,_|___/___/
//   |_|                  

// Contributors: Yee Xin Chiew, Santiago Montesdeoca
// Passing of parameters to offset target for mixing and smudging effects
GLSLShader offsetPass {
	void main() {		
		float ctrlB = texture(gAbstractionControlTexSampler, uv).b; // mixing
        float ctrlR = texture(gAbstractionControlTexSampler, uv).r; // smudging
        result = vec4(ctrlB, ctrlR, 0, 0);
	}
}


//              _      _             
//    _ __ ___ (_)_  _(_)_ __   __ _ 
//   | '_ ` _ \| \ \/ / | '_ \ / _` |
//   | | | | | | |>  <| | | | | (_| |
//   |_| |_| |_|_/_/\_\_|_| |_|\__, |
//                             |___/

// Contributors: Yee Xin Chiew, Santiago Montesdeoca
// Mixing effect
GLSLShader offsetFilter {
	void main() {	
		ivec2 loc = ivec2(gl_FragCoord.xy);
		vec4 stylizationTex = texelFetch(gStylizationTexSampler,loc,0);
		vec4 blendTex = texelFetch(gBlendTexSampler,loc,0);
		vec3 offsetCtrl = texelFetch(gOffsetTexSampler,loc,0).rgb;
		float ctrl = texture(gAbstractionControlTexSampler, uv).b; 
		
        if (stylizationTex.a >= 0) { // mixed areas
			
			float inc = pow(3.0, offsetCtrl.r + 1.0); // non-linear increment
			float offs = saturate(offsetCtrl.r * inc);
			blendTex = lerp(stylizationTex, blendTex, offs);

			if (luminance(blendTex.rgb) < luminance(stylizationTex.rgb)) {
				result = blendTex;
			} else {
				result = stylizationTex;
			}
		} else {
			result = stylizationTex;
		}
	}
}



//    _            _           _                       
//   | |_ ___  ___| |__  _ __ (_) __ _ _   _  ___  ___ 
//   | __/ _ \/ __| '_ \| '_ \| |/ _` | | | |/ _ \/ __|
//   | ||  __/ (__| | | | | | | | (_| | |_| |  __/\__ \
//    \__\___|\___|_| |_|_| |_|_|\__, |\__,_|\___||___/
//                                  |_|                
// OPERATION FOR OFFSET TARGET
technique offsetOutput {
	pass p0 {
        VertexShader(in appDataSampler, out vertexOutputSampler) = quadVertSampler;
        PixelShader(in vertexOutputSampler, out fragmentOutput) = { offsetPass };
  }
}

// MIXING EFFECT
technique mixing {
	pass p0 {
        VertexShader(in appDataSampler, out vertexOutputSampler) = quadVertSampler;
        PixelShader(in vertexOutputSampler, out fragmentOutput) = { Common_Pixel_Functions, offsetFilter };
  }
}
