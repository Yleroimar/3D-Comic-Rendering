////////////////////////////////////////////////////////////////////////////////////////////////////
// quadAdjustLoad.ogsfx (GLSL)
// Brief: Adjusting and loading render targets
// Contributors: Santiago Montesdeoca, Yee Xin Chiew, Amir Semmo
////////////////////////////////////////////////////////////////////////////////////////////////////
//              _  _           _        _                 _
//     __ _  __| |(_)_   _ ___| |_     | | ___   __ _  __| |
//    / _` |/ _` || | | | / __| __|____| |/ _ \ / _` |/ _` |
//   | (_| | (_| || | |_| \__ \ ||_____| | (_) | (_| | (_| |
//    \__,_|\__,_|/ |\__,_|___/\__|    |_|\___/ \__,_|\__,_|
//              |__/
////////////////////////////////////////////////////////////////////////////////////////////////////
// This base shader adjusts and loads any required elements for future stylization in MNPR
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "include/quadCommon.ogsfh"

// MAYA VARIABLES
uniform float gNCP : NearClipPlane;  // near clip plane distance


// TEXTURES
uniform Texture2D gDiffuseTex;     // diffuse
uniform Texture2D gSpecularTex;    // specular
uniform Texture2D gZBuffer;        // ZBuffer
uniform Texture2D gSubstrateTex;   // substrate texture (paper, canvas, etc)
uniform Texture2D gLinearDepthTex; // linearized depth
uniform Texture2D gVelocityTex;    // velocity

// VARIABLES
// post-processing effects
uniform float gSaturation = 1.0;
uniform float gContrast = 1.0;
uniform float gBrightness = 1.0;

// engine settings
uniform float gGamma = 1.0;
uniform vec2 gDepthRange = { 8.0, 50.0 };
uniform vec3 gSubstrateColor = { 1.0, 1.0, 1.0 };
uniform float gEnableVelocityPV;
uniform float gSubstrateRoughness;
uniform float gSubstrateTexScale;
uniform vec2 gSubstrateTexDimensions;
uniform vec2 gSubstrateTexUVOffset;
uniform vec3 gAtmosphereTint;
uniform vec2 gAtmosphereRange;


// MRT
attribute fragmentMRTOutput {
	vec4 stylizationOutput : COLOR0;
    vec4 substrateOutput : COLOR1;
    vec2 depthOutput : COLOR2;
	vec2 velocityOutput : COLOR3;
};


// SAMPLERS
uniform sampler2D gDiffuseTexSampler = sampler_state {
    Texture = <gDiffuseTex>;
};
uniform sampler2D gSpecularTexSampler = sampler_state {
    Texture = <gSpecularTex>;
};
uniform sampler2D gSubstrateSampler = sampler_state {
	Texture = <gSubstrateTex>;
};
uniform sampler2D gDepthSampler = sampler_state {
	Texture = <gZBuffer>;
};
uniform sampler2D gLinearDepthSampler = sampler_state {
	Texture = <gLinearDepthTex>;
};
uniform sampler2D gVelocitySampler = sampler_state {
	Texture = <gVelocityTex>;
};


//     __                  _   _
//    / _|_   _ _ __   ___| |_(_) ___  _ __  ___
//   | |_| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
//   |  _| |_| | | | | (__| |_| | (_) | | | \__ \
//   |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
//
GLSLShader Pixel_Functions {
	// remap range
	float remap(float value, float oldMin, float oldMax, float newMin, float newMax) {
		return newMin + (((value - oldMin) / (oldMax - oldMin)) * (newMax - newMin));
	}
}



//              _  _           _             _                 _
//     __ _  __| |(_)_   _ ___| |_          | | ___   __ _  __| |
//    / _` |/ _` || | | | / __| __|  _____  | |/ _ \ / _` |/ _` |
//   | (_| | (_| || | |_| \__ \ |_  |_____| | | (_) | (_| | (_| |
//    \__,_|\__,_|/ |\__,_|___/\__|         |_|\___/ \__,_|\__,_|
//              |__/

// Contributors: Santiago Montesdeoca, Yee Xin Chiew, Amir Semmo
// This shader performs four operations:
// 1.- Simple color post processing operations over the Maya render (tgt 1)
// 2.- Adds the substrate color as the background color (tgt 1)
// 3.- Loads the substrate texture into the substrate target (tgt 2)
// 4.- Modulates Maya's Z-buffer to a linear depth target with a custom range (tgt 3)
GLSLShader adjustLoadFrag {
	void main() {
        ivec2 loc = ivec2(gl_FragCoord.xy);

        // LINEAR DEPTH
        // Maya depth buffer is calculated as: zBuffer = 1 - gNCP/z;
        float zBuffer = texelFetch(gDepthSampler, loc, 0).r;
        float depth = 1.0;
        float depthInMayaUnits = 1000000000.0;  // maximum depth
        if (zBuffer < 1.0) {
            depthInMayaUnits = -gNCP / (zBuffer - 1.0);  // [0 ... gNCP]
            depth = remap(depthInMayaUnits, gDepthRange.x, gDepthRange.y, 0.0, 1.0);
        }
		// save depth of previous frame
		float depthPrevious = texelFetch(gLinearDepthSampler, loc, 0).x;
		depthOutput = vec2(depth, depthPrevious);

		// POST-PROCESSING
		// get pixel value
		vec4 renderTex = texelFetch(gSampler, loc, 0);  // equivalent to Load in HLSL
        vec4 diffuseTex = texelFetch(gDiffuseTexSampler, loc, 0);
        float mask = texelFetch(gSpecularTexSampler, loc, 0).a;
        if (mask > 0) {
            if (gGamma < 1) {
                // if viewport is not gamma corrected, at least keep light linearity
                diffuseTex.rgb = pow(diffuseTex.rgb, vec3(0.454545455));
            }
            renderTex.rgb *= diffuseTex.rgb;
            renderTex.rgb += texelFetch(gSpecularTexSampler, loc, 0).rgb;   // add specular contribution
        }

		// color operations
		float luma = luminance(renderTex.rgb);
		vec3 saturationResult = lerp(vec3(luma, luma, luma), renderTex.rgb, gSaturation);
		vec3 contrastResult = lerp(vec3(0.5, 0.5, 0.5), saturationResult, gContrast * 0.5 + 0.5);
		float b = gBrightness - 1.0;
		vec3 brightnessResult = saturate(contrastResult.xyz + b);

        // atmospheric operations
        float remapedDepth = saturate(remap(depthInMayaUnits, gAtmosphereRange.x, gAtmosphereRange.y, 0.0, 1.0));
        vec3 atmospericResult = lerp(brightnessResult, gAtmosphereTint, remapedDepth);

		// add substrate color
		renderTex.rgb = lerp(gSubstrateColor, atmospericResult, renderTex.a);
		stylizationOutput = renderTex;

		// SUBSTRATE
		// get proper UVS
		vec2 texcoords = vec2(uv * (gScreenSize / gSubstrateTexDimensions) * (gSubstrateTexScale) + gSubstrateTexUVOffset);
		// get substrate pixel
		vec3 substrate = texture2D(gSubstrateSampler, texcoords).rgb;  // equivalent to Sample in HLSL
		substrate = substrate - 0.5;  // bring to [-0.5 - 0 - 0.5]
		substrate *= gSubstrateRoughness;  // define roughness
		substrateOutput = vec4(substrate + 0.5, 0.0);  // bring back to [0 - 1]

		 // velocity reset if disabled
		 velocityOutput = (gEnableVelocityPV == 1.0 ? texelFetch(gVelocitySampler, loc, 0).xy : vec2(0.0, 0.0));
	}
}



//    _            _           _
//   | |_ ___  ___| |__  _ __ (_) __ _ _   _  ___  ___
//   | __/ _ \/ __| '_ \| '_ \| |/ _` | | | |/ _ \/ __|
//   | ||  __/ (__| | | | | | | | (_| | |_| |  __/\__ \
//    \__\___|\___|_| |_|_| |_|_|\__, |\__,_|\___||___/
//                                  |_|
// ADJUST AND LOAD EVERYTHING FOR STYLIZATION
technique adjustLoadMNPR {
	pass p0 {
		VertexShader(in appDataSampler, out vertexOutputSampler) = quadVertSampler;
		PixelShader(in vertexOutputSampler, out fragmentMRTOutput) = { Common_Pixel_Functions, Pixel_Functions, adjustLoadFrag };
	}
}
