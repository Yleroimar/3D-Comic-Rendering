////////////////////////////////////////////////////////////////////////////////////////////////////
// quadPigmentManipulation10.fx (HLSL)
// Brief: Pigment manipulation algorithms
// Contributors: Santiago Montesdeoca, Amir Semmo, Yee Xin Chiew
////////////////////////////////////////////////////////////////////////////////////////////////////
//          _                            _                             _             _       _   _             
//    _ __ (_) __ _ _ __ ___   ___ _ __ | |_     _ __ ___   __ _ _ __ (_)_ __  _   _| | __ _| |_(_) ___  _ __  
//   | '_ \| |/ _` | '_ ` _ \ / _ \ '_ \| __|   | '_ ` _ \ / _` | '_ \| | '_ \| | | | |/ _` | __| |/ _ \| '_ \ 
//   | |_) | | (_| | | | | | |  __/ | | | |_    | | | | | | (_| | | | | | |_) | |_| | | (_| | |_| | (_) | | | |
//   | .__/|_|\__, |_| |_| |_|\___|_| |_|\__|   |_| |_| |_|\__,_|_| |_|_| .__/ \__,_|_|\__,_|\__|_|\___/|_| |_|
//   |_|      |___/                                                     |_|                                    
////////////////////////////////////////////////////////////////////////////////////////////////////
// This shader file provides algorithms for pigment manipulation such as:
// 1.- Pigment density variations commonly found in transparent media (e.g. watercolor)
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "include/quadCommon.ogsfh"

// TEXTURES
uniform Texture2D gFilterTex;
uniform Texture2D gControlTex;


// VARIABLES
uniform vec3 gSubstrateColor = { 1.0, 1.0, 1.0 };


// MRT
attribute fragmentMRTOutput {
	vec4 colorOutput : COLOR0;
    float alphaOutput : COLOR1;
};


// SAMPLERS
uniform sampler2D gFilterSampler = sampler_state{
    Texture = <gFilterTex>;
};
uniform sampler2D gControlSampler = sampler_state {
	Texture = <gControlTex>;
};



//          _                            _           _                _ _         
//    _ __ (_) __ _ _ __ ___   ___ _ __ | |_      __| | ___ _ __  ___(_) |_ _   _ 
//   | '_ \| |/ _` | '_ ` _ \ / _ \ '_ \| __|    / _` |/ _ \ '_ \/ __| | __| | | |
//   | |_) | | (_| | | | | | |  __/ | | | |_    | (_| |  __/ | | \__ \ | |_| |_| |
//   | .__/|_|\__, |_| |_| |_|\___|_| |_|\__|    \__,_|\___|_| |_|___/_|\__|\__, |
//   |_|      |___/                                                         |___/ 

// Contributor: Santiago Montesdeoca
// Modifies the color based on the accumulated density
// -> Based on the color transmittance modification model of Bousseau et al. 2006 
//    and pigment turbulence model by Montesdeoca et al. 2017
//    [2006] Interactive Watercolor Rendering with Temporal Coherence and Abstraction
//    [2017] Art-directed watercolor stylization of 3D animations in real-time
GLSLShader pigmentDensityWCFrag {
	void main() {
		ivec2 loc = ivec2(gl_FragCoord.xy); // coordinates for loading
		
		// get color target
		vec4 renderTex = texelFetch(gSampler, loc, 0);  // equivalent to Load in HLSL

		// get local density parameters
		float control = texelFetch(gControlSampler, loc, 0).b; // pigment control target (b)
		
		// calculate density
        float density = lerp(1.0, 2.0, control);
		
		// modify color
		vec3 colorOutput = pow(abs(renderTex.rgb), vec3(density, density, density));  // color transmittance modification model
		colorOutput = mix(gSubstrateColor, colorOutput, saturate(1 + control));  // pigment turbulence model

		result = vec4(colorOutput, renderTex.a);
	}
}

// Contributor: Amir Semmo
// Modifies the color based on the accumulated density (oil paint)
// -> Based on the color transmittance modification model of Bousseau et al. 2006 
//    and pigment turbulence model by Montesdeoca et al. 2017
//    [2006] Interactive Watercolor Rendering with Temporal Coherence and Abstraction
//    [2017] Art-directed watercolor stylization of 3D animations in real-time
GLSLShader pigmentDensityOPFrag {
	void main() {
		ivec2 loc = ivec2(gl_FragCoord.xy); // coordinates for loading
		
		// get color target
		vec4 renderTex = texelFetch(gSampler, loc, 0);  // equivalent to Load in HLSL
		float filterTex = texelFetch(gFilterSampler, loc, 0).x;

		// get local density parameters
		float control = texelFetch(gControlSampler, loc, 0).b; // pigment control target (b)
		
		// calculate density
        float density = lerp(1.0, 2.0, control);
		
		// modify color
		vec3 colorOut = pow(abs(renderTex.rgb), vec3(density, density, density));  // color transmittance modification model
		colorOut = lerp(gSubstrateColor, colorOut, saturate(1 + control));  // pigment turbulence model

		colorOutput = vec4(colorOut, renderTex.a);
        alphaOutput = clamp(0, 1, filterTex + control);
	}
}

// Contributor: Yee Xin Chiew
// Modifies the color based on the accumulated density (charcoal)
// -> Based on the color transmittance modification model of Bousseau et al. 2006 
//    and pigment turbulence model by Montesdeoca et al. 2017
//    [2006] Interactive Watercolor Rendering with Temporal Coherence and Abstraction
//    [2017] Art-directed watercolor stylization of 3D animations in real-time
GLSLShader pigmentDensityCCFrag {
    void main() {
        ivec2 loc = ivec2(gl_FragCoord.xy); // coordinates for loading

        // get color target
        vec4 renderTex = texelFetch(gSampler,loc,0);

        // get local density parameters
        float control = texelFetch(gControlSampler,loc,0).b;  // pigment control target (b)

        // calculate density
        float density = lerp(1.0, 2.0, control);

        // modify color
        vec3 colorOutput = pow(abs(renderTex.rgb), vec3(density));  // color transmittance modification model
        colorOutput = lerp(gSubstrateColor, colorOutput, clamp(1 + (control*0.2),0,1));  // pigment turbulence model

        result = vec4(colorOutput, renderTex.a);
    }
}



//    _            _           _                       
//   | |_ ___  ___| |__  _ __ (_) __ _ _   _  ___  ___ 
//   | __/ _ \/ __| '_ \| '_ \| |/ _` | | | |/ _ \/ __|
//   | ||  __/ (__| | | | | | | | (_| | |_| |  __/\__ \
//    \__\___|\___|_| |_|_| |_|_|\__, |\__,_|\___||___/
//                                  |_|                
// [WC] - PIGMENT DENSITY
technique pigmentDensityWC {
	pass p0 {
		VertexShader(in appData, out vertexOutput) = quadVert;
		PixelShader(in vertexOutput, out fragmentOutput) = { pigmentDensityWCFrag };
	}
}

// [OP] - PIGMENT DENSITY
technique pigmentDensityOP {
	pass p0 {
		VertexShader(in appData, out vertexOutput) = quadVert;
		PixelShader(in vertexOutput, out fragmentMRTOutput) = { pigmentDensityOPFrag };
	}
}

// [CC] - PIGMENT DENSITY
technique pigmentDensityCC {
    pass p0 {
        VertexShader(in appData, out vertexOutput) = quadVert;
        PixelShader(in vertexOutput, out fragmentOutput) = { pigmentDensityCCFrag };
    }
}
