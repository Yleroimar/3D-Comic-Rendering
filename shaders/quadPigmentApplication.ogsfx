////////////////////////////////////////////////////////////////////////////////////////////////////
// quadPigmentApplication.ogsfx (GLSL)
// Brief: Defining how pigments are applied
// Contributors: Santiago Montesdeoca, Amir Semmo
////////////////////////////////////////////////////////////////////////////////////////////////////
//          _                            _                         _ _           _   _             
//    _ __ (_) __ _ _ __ ___   ___ _ __ | |_      __ _ _ __  _ __ | (_) ___ __ _| |_(_) ___  _ __  
//   | '_ \| |/ _` | '_ ` _ \ / _ \ '_ \| __|    / _` | '_ \| '_ \| | |/ __/ _` | __| |/ _ \| '_ \ 
//   | |_) | | (_| | | | | | |  __/ | | | |_    | (_| | |_) | |_) | | | (_| (_| | |_| | (_) | | | |
//   | .__/|_|\__, |_| |_| |_|\___|_| |_|\__|    \__,_| .__/| .__/|_|_|\___\__,_|\__|_|\___/|_| |_|
//   |_|      |___/                                   |_|   |_|                                    
////////////////////////////////////////////////////////////////////////////////////////////////////
// This shader file provides different algorithms for pigment application in different media
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "include/quadCommon.ogsfh"

// TEXTURES
uniform Texture2D gFilterTex;
uniform Texture2D gSubstrateTex;
uniform Texture2D gControlTex;


// VARIABLES
uniform vec3 gSubstrateColor = { 1.0, 1.0, 1.0 };
uniform float gPigmentDensity;
uniform float gDryBrushThreshold;


// MRT
attribute fragmentMRTOutput {
    vec4 colorOutput : COLOR0;
    float alphaOutput : COLOR1;
};


// SAMPLERS
uniform sampler2D gFilterSampler = sampler_state{
    Texture = <gFilterTex>;
};
uniform sampler2D gSubstrateSampler = sampler_state{
    Texture = <gSubstrateTex>;
};
uniform sampler2D gControlSampler = sampler_state{
    Texture = <gControlTex>;
};



//                 _                            _         _                  _                    _     
//   __      _____| |_           __ _ _ __   __| |     __| |_ __ _   _      | |__  _ __ _   _ ___| |__  
//   \ \ /\ / / _ \ __|____     / _` | '_ \ / _` |    / _` | '__| | | |_____| '_ \| '__| | | / __| '_ \ 
//    \ V  V /  __/ ||_____|   | (_| | | | | (_| |   | (_| | |  | |_| |_____| |_) | |  | |_| \__ \ | | |
//     \_/\_/ \___|\__|         \__,_|_| |_|\__,_|    \__,_|_|   \__, |     |_.__/|_|   \__,_|___/_| |_|
//                                                               |___/                                  
// Contributor: Santiago Montesdeoca
// [WC] - Defines how watercolor is applied:
// - Wet, accumulating pigments at the valleys of the paper (aka substrate granulation)
// - Dry, showing pigments that have only been applied at the peaks of the paper
// -> Based on the pigment application model by Montesdeoca et al. 2017
//    [2017] Edge- and substrate-based effects for watercolor stylization
GLSLShader pigmentApplicationWCFrag{
    void main() {
    ivec2 loc = ivec2(gl_FragCoord.xy);  // coordinates for loading

    vec4 renderTex = texelFetch(gSampler, loc, 0);
    float heightMap = texelFetch(gSubstrateSampler, loc, 0).b;  // heightmap is embedded in the blue channel of the surfaceTex
    float application = texelFetch(gControlSampler, loc, 0).g;  // dry brush --- wet brush, pigments control target (g)
    float mask = renderTex.a;
    
    // check if its not the substrate
    if (mask < 0.01) {
        result = renderTex;
        return;
    }

    //calculate drybrush
    float dryBrush = -application;
    float dryDiff = heightMap - dryBrush;
    if (dryDiff < 0) {
        result = lerp(renderTex, vec4(gSubstrateColor, renderTex.a), saturate(abs(dryDiff)*gDryBrushThreshold));
        return;
    } else {
        // calculate density accumulation (-1 granulate, 0 default)
        dryBrush = (abs(dryBrush) + 0.2);  // default is granulated (// 1.2 granulate, 0.2 default)

        //more accumulation on brighter areas
        dryBrush = lerp(dryBrush, dryBrush * 5, luminance(renderTex.rgb));

        //modulate heightmap to be between 0.8-1.0 (for montesdeoca et al. 2016)
        heightMap = (heightMap * 0.2) + 0.8;
    }

    //montesdeoca et al. 2016
    float accumulation = 1 + (dryBrush * (1 - (heightMap)) * gPigmentDensity);

    //calculate denser color output
    vec3 colorOut = pow(abs(renderTex.rgb), vec3(accumulation));

    // don't granulate if the renderTex is similar to substrate color
    float colorDiff = saturate(length(renderTex.rgb - gSubstrateColor) * 5);
    colorOut = lerp(renderTex.rgb, colorOut, vec3(colorDiff));
    result = vec4(colorOut, renderTex.a);
    }
}



//        _              _                    _     
//     __| |_ __ _   _  | |__  _ __ _   _ ___| |__  
//    / _` | '__| | | | | '_ \| '__| | | / __| '_ \ 
//   | (_| | |  | |_| | | |_) | |  | |_| \__ \ | | |
//    \__,_|_|   \__, | |_.__/|_|   \__,_|___/_| |_|
//               |___/                              
// Contributor: Amir Semmo
// [OP] - Defines how oil is applied:
// - Thick, accumulating pigments at the valleys of the paper 
// - Dry, showing pigments that have only been applied at the peaks of the paper
// -> Based on the watercolor dry brush, from the pigment application model by Montesdeoca et al. 2017
//    [2017] Edge- and substrate-based effects for watercolor stylization
GLSLShader pigmentApplicationOPFrag{
    void main() {
    ivec2 loc = ivec2(gl_FragCoord.xy);  // coordinates for loading

    vec4 renderTex = texelFetch(gSampler, loc, 0);
    float filterTex = texelFetch(gFilterSampler, loc, 0).x;
    float heightMap = texelFetch(gSubstrateSampler, loc, 0).b;  // heightmap is embedded in the blue channel of the surfaceTex
    float application = texelFetch(gControlSampler, loc, 0).g;  // dry brush --- wet brush, pigments control target (g)
    float mask = renderTex.a;
    
    // check if its not the substrate
    if (mask < 0.01) {
        colorOutput = renderTex;
        alphaOutput = filterTex;
        return;
    }

    //calculate drybrush
    float dryBrush = -application;
    float dryDiff = heightMap - dryBrush;
    if (dryDiff < 0) {
        float alpha = saturate(abs(dryDiff)*gDryBrushThreshold);
        colorOutput = lerp(renderTex, vec4(gSubstrateColor, renderTex.a), alpha);
        alphaOutput = filterTex * (1.0 - alpha);
        return;
    } else {
        // calculate density accumulation (-1 granulate, 0 default)
        dryBrush = (abs(dryBrush) + 0.2);  // default is granulated (// 1.2 granulate, 0.2 default)

        //more accumulation on brighter areas
        dryBrush = lerp(dryBrush, dryBrush * 5, luminance(renderTex.rgb));

        //modulate heightmap to be between 0.8-1.0 (for montesdeoca et al. 2016)
        heightMap = (heightMap * 0.2) + 0.8;
    }

    //montesdeoca et al. 2016
    float accumulation = 1 + (dryBrush * (1 - (heightMap)) * gPigmentDensity);

    //calculate denser color output
    vec3 colorOut = pow(abs(renderTex.rgb), vec3(accumulation));

    // don't granulate if the renderTex is similar to substrate color
    float colorDiff = saturate(length(renderTex.rgb - gSubstrateColor) * 5);
    colorOut = lerp(renderTex.rgb, colorOut, vec3(colorDiff));

    colorOutput = vec4(colorOut, renderTex.a);
    alphaOutput = filterTex;
    }
}


//    _            _           _
//   | |_ ___  ___| |__  _ __ (_) __ _ _   _  ___  ___
//   | __/ _ \/ __| '_ \| '_ \| |/ _` | | | |/ _ \/ __|
//   | ||  __/ (__| | | | | | | | (_| | |_| |  __/\__ \
//    \__\___|\___|_| |_|_| |_|_|\__, |\__,_|\___||___/
//                                  |_|
// [WC] - PIGMENT APPLICATION
technique pigmentApplicationWC {
    pass p0 {
        VertexShader(in appData, out vertexOutput) = quadVert;
        PixelShader(in vertexOutput, out fragmentOutput) = { Common_Pixel_Functions, pigmentApplicationWCFrag };
    }
}

// [OP] - PIGMENT APPLICATION
technique pigmentApplicationOP {
    pass p0 {
        VertexShader(in appData, out vertexOutput) = quadVert;
        PixelShader(in vertexOutput, out fragmentMRTOutput) = { Common_Pixel_Functions, pigmentApplicationOPFrag };
    }
}
