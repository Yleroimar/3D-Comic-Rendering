////////////////////////////////////////////////////////////////////////////////////////////////////
// quadEdgeManipulation.ogsfx (GLSL)
// Brief: Edge manipulation algorithms
// Contributors: Santiago Montesdeoca
////////////////////////////////////////////////////////////////////////////////////////////////////
//             _                                      _             _       _   _             
//     ___  __| | __ _  ___     _ __ ___   __ _ _ __ (_)_ __  _   _| | __ _| |_(_) ___  _ __  
//    / _ \/ _` |/ _` |/ _ \   | '_ ` _ \ / _` | '_ \| | '_ \| | | | |/ _` | __| |/ _ \| '_ \ 
//   |  __/ (_| | (_| |  __/   | | | | | | (_| | | | | | |_) | |_| | | (_| | |_| | (_) | | | |
//    \___|\__,_|\__, |\___|   |_| |_| |_|\__,_|_| |_|_| .__/ \__,_|_|\__,_|\__|_|\___/|_| |_|
//               |___/                                 |_|                                    
////////////////////////////////////////////////////////////////////////////////////////////////////
// This shader provides alorithms for edge manipulation such as:
// 1.- Gradient edge darkening commonly found in Watercolors [WC]
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "include/quadCommon.ogsfh"

// TEXTURES
uniform Texture2D gEdgeTex;
uniform Texture2D gControlTex;


// VARIABLES
uniform vec3 gSubstrateColor = { 1.0, 1.0, 1.0 };
uniform float gEdgeIntensity = 1.0;


// SAMPLERS
uniform sampler2D gEdgeTexSampler = sampler_state {
    Texture = <gEdgeTex>;
};
uniform sampler2D gControlTexSampler = sampler_state {
    Texture = <gControlTex>;
};


//                        _ _            _                _                 
//     __ _ _ __ __ _  __| (_) ___ _ __ | |_      ___  __| | __ _  ___  ___ 
//    / _` | '__/ _` |/ _` | |/ _ \ '_ \| __|    / _ \/ _` |/ _` |/ _ \/ __|
//   | (_| | | | (_| | (_| | |  __/ | | | |_    |  __/ (_| | (_| |  __/\__ \
//    \__, |_|  \__,_|\__,_|_|\___|_| |_|\__|    \___|\__,_|\__, |\___||___/
//    |___/                                                 |___/           

// Contributor: Santiago Montesdeoca
// [WC] - Modifies the color at the edges using previously calculated edge gradients
// -> Based on the gaps & overlaps model by Montesdeoca et al. 2017
//    [2017] Art-directed watercolor stylization of 3D animations in real-time
GLSLShader gradientEdgesWCFrag {
    void main() {
        ivec2 loc = ivec2(gl_FragCoord.xy);

		// get pixel values
        vec4 renderTex = texelFetch(gSampler, loc, 0);
        vec2 edgeBlur = texelFetch(gEdgeTexSampler, loc, 0).ga;
        float ctrlIntensity = texelFetch(gControlTexSampler, loc, 0).r;  // edge control target (r)

        // calculate edge intensity
        if (ctrlIntensity > 0) {
	        ctrlIntensity *= 5.0;
        }
        float paintedIntensity = 1.0 + ctrlIntensity;
        float dEdge = edgeBlur.x * gEdgeIntensity * paintedIntensity;

        // EDGE MODULATION
        // get rid of edges with color similar to substrate
        dEdge = lerp(0.0, dEdge, clamp(length(renderTex.rgb - gSubstrateColor)*5.0, 0, 1));
        // get rid of edges at bleeded areas
        dEdge = lerp(0.0, dEdge, clamp((1.0 - (edgeBlur.y*3.0)), 0, 1));

        // color modification model
        float density = 1.0 + dEdge;
        vec3 darkenedEdgeCM = pow(renderTex.rgb, vec3(density));

        result = vec4(darkenedEdgeCM, renderTex.a);
    }
}



//    _            _           _                       
//   | |_ ___  ___| |__  _ __ (_) __ _ _   _  ___  ___ 
//   | __/ _ \/ __| '_ \| '_ \| |/ _` | | | |/ _ \/ __|
//   | ||  __/ (__| | | | | | | | (_| | |_| |  __/\__ \
//    \__\___|\___|_| |_|_| |_|_|\__, |\__,_|\___||___/
//                                  |_|                
// [WC] - GRADIENT EDGES (EDGE DARKENING)
technique gradientEdgesWC {
	pass p0 {
        VertexShader(in appData, out vertexOutput) = quadVert;
        PixelShader(in vertexOutput, out fragmentOutput) = { Common_Pixel_Functions, gradientEdgesWCFrag };
	}
}